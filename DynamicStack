package D_A;

public class StackDynamic {
	

	
		private int size;
		private int counter;
		
		private int data[];
		
		public StackDynamic() {
			
			this.size=1;
			this.counter=0;
			data=new int[this.size];
			
		}
		
		
		public void push(int data) {
			if(counter>=size) {
				
				grow();
			}
			
			if(counter<0)
				counter=0;
				
			this.data[counter++]=data;
			
				
		}
		
		
		public void grow() {
			int newCapacity=(int)(size*2);
			int[]newArray=new int[newCapacity];
			for(int i=0;i<counter;i++) {
				newArray[i]=data[i];
			}
			size=newCapacity;
			data=newArray;
			
		}
		
		private void shrink() {
			int newCapacity=(int)(size-1);
			int[]newArray=new int[newCapacity];
			for(int i=0;i<counter;i++) {
				newArray[i]=data[i];
			}
			size=newCapacity;
			data=newArray;
		}
		
		
		
		public void pop() {
			counter--;
			if(counter<0) {
				System.out.println("Stack is Empty");
			
			}
			else {
				
			System.out.println(data[counter]);
			shrink();
			}
			
			
			
			
		}
		
		public int getCounter() {
			return counter;
		}
		
		public int getSize() {
			return size;
		}

	}



